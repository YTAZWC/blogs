import{_ as t,r as i,o as a,c as n,a as o,e}from"./app-5x9wb8FW.js";const r={},c=e('<h2 id="项目架构目标" tabindex="-1"><a class="header-anchor" href="#项目架构目标"><span>项目架构目标</span></a></h2><ul><li>高性能: 快速的访问体验</li><li>高可用: 网站服务一直可以正常访问</li><li>可伸缩: 通过硬件增加/减少, 提高/降低处理能力</li><li>高可扩展: 系统间耦合低</li><li>安全性: 安全访问和数据加密</li><li>敏捷性: 随需应变, 快速响应</li></ul><h2 id="集群和分布式" tabindex="-1"><a class="header-anchor" href="#集群和分布式"><span>集群和分布式</span></a></h2><ul><li>集群: 很多&quot;人&quot;一起, 干一样的事情 <ul><li>一个业务模块, 部署在多台服务器上</li></ul></li><li>分布式: 很多&quot;人&quot;一起, 干不一样的事, 这些事组合成一件事 <ul><li>一个大的业务系统,拆分为小的业务模块, 分别部署在不同的机器上</li></ul></li></ul><h2 id="架构演进" tabindex="-1"><a class="header-anchor" href="#架构演进"><span>架构演进</span></a></h2>',5),s=e('<h3 id="单体结构" tabindex="-1"><a class="header-anchor" href="#单体结构"><span>单体结构</span></a></h3><p>优点:</p><ul><li>简单; 开发部署方便, 小型项目首选</li></ul><p>缺点:</p><ul><li>项目启动慢</li><li>可靠性差</li><li>可伸缩性差</li><li>可扩展性和可维护性差</li><li>性能低</li></ul><h3 id="垂直架构" tabindex="-1"><a class="header-anchor" href="#垂直架构"><span>垂直架构</span></a></h3><p>垂直架构是指 将单体架构中的多个模块拆分为多个独立的项目, 形成多个独立的单体架构</p><p>存在的问题:</p><ul><li>重复功能太多,在多个单体架构中,可能存在重复模块</li></ul><h3 id="分布式架构" tabindex="-1"><a class="header-anchor" href="#分布式架构"><span>分布式架构</span></a></h3><ul><li><p>分布式架构是指在垂直架构的基础上, 将公共业务模块抽取出来, 作为独立的服务, 供其他调用者消费, 以实现服务的共享和重用.</p></li><li><p>RPC: 远程过程调用, 有非常多的协议和技术都实现了RPC的过程;比如: HTTP REST风格, Java RMI规范, WebService SOAP协议, Hession等等</p></li></ul><p>存在的问题:</p><ul><li>服务提供方一旦产生变更, 所有消费方都需要变更</li></ul><h3 id="soa架构" tabindex="-1"><a class="header-anchor" href="#soa架构"><span>SOA架构</span></a></h3><ul><li><p>SOA：（Service-Oriented Architecture，面向服务的架构）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和契约联系起来。</p></li><li><p>ESB：(Enterparise Servce Bus) 企业服务总线，服务中介。主要是提供了一个服务于服务之间的交互。ESB 包含的功能如：负载均衡，流量控制，加密处理，服务的监控，异常处理，监控告急等等。</p></li></ul><h3 id="微服务架构" tabindex="-1"><a class="header-anchor" href="#微服务架构"><span>微服务架构</span></a></h3><ul><li>微服务架构是在 SOA 上做的升华，微服务架构强调的一个重点是“业务需要彻底的组件化和服务化”，原有的单个业务系统会拆分为多个可以独立开发、设计、运行的小应用。这些小应用之间通过服务完成交互和集成。</li><li>微服务架构 = 80%的SOA服务架构思想 + 100%的组件化架构思想 + 80%的领域建模思想</li></ul><p>特点</p><ul><li>服务实现组件化：开发者可以自由选择开发技术。也不需要协调其他团队</li><li>服务之间交互一般使用REST API</li><li>去中心化：每个微服务有自己私有的数据库持久化业务数据</li><li>自动化部署：把应用拆分成为一个一个独立的单个服务，方便自动化部署、测试、运维</li></ul><p><mark>Dubbo 是SOA时代的产物, SpringCloud是微服务时代的产物</mark></p>',20);function d(p,h){const l=i("Mermaid");return a(),n("div",null,[c,o(l,{id:"mermaid-67",code:"eJzj0tXV5SrJLMlJtVJIy8kvT85ILCoBC3LBuQo+QVwKQPC0d+qTvZOfzdv2bF6Lgq6uncLTeU3PZ29BFuhoe7qj+emefiSxYH9HZBX71j2b0/u0ayFEjIsLAGbSO2M="}),s])}const m=t(r,[["render",d],["__file","index.html.vue"]]),g=JSON.parse(`{"path":"/dubbo/grgvjnyc/","title":"分布式系统中的相关概念","lang":"zh-CN","frontmatter":{"title":"分布式系统中的相关概念","author":"花木凋零成兰","createTime":"2024/04/17 10:18:02","permalink":"/dubbo/grgvjnyc/","description":"项目架构目标 高性能: 快速的访问体验 高可用: 网站服务一直可以正常访问 可伸缩: 通过硬件增加/减少, 提高/降低处理能力 高可扩展: 系统间耦合低 安全性: 安全访问和数据加密 敏捷性: 随需应变, 快速响应 集群和分布式 集群: 很多\\"人\\"一起, 干一样的事情 一个业务模块, 部署在多台服务器上 分布式: 很多\\"人\\"一起, 干不一样的事, 这些...","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"],["meta",{"property":"og:url","content":"https://ytazwc.top/blogs/dubbo/grgvjnyc/"}],["meta",{"property":"og:site_name","content":"花木凋零成兰"}],["meta",{"property":"og:title","content":"分布式系统中的相关概念"}],["meta",{"property":"og:description","content":"项目架构目标 高性能: 快速的访问体验 高可用: 网站服务一直可以正常访问 可伸缩: 通过硬件增加/减少, 提高/降低处理能力 高可扩展: 系统间耦合低 安全性: 安全访问和数据加密 敏捷性: 随需应变, 快速响应 集群和分布式 集群: 很多\\"人\\"一起, 干一样的事情 一个业务模块, 部署在多台服务器上 分布式: 很多\\"人\\"一起, 干不一样的事, 这些..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-17T03:24:57.000Z"}],["meta",{"property":"article:author","content":"花木凋零成兰"}],["meta",{"property":"article:modified_time","content":"2024-04-17T03:24:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式系统中的相关概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-17T03:24:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"花木凋零成兰\\"}]}"]]},"headers":[{"level":2,"title":"项目架构目标","slug":"项目架构目标","link":"#项目架构目标","children":[]},{"level":2,"title":"集群和分布式","slug":"集群和分布式","link":"#集群和分布式","children":[]},{"level":2,"title":"架构演进","slug":"架构演进","link":"#架构演进","children":[{"level":3,"title":"单体结构","slug":"单体结构","link":"#单体结构","children":[]},{"level":3,"title":"垂直架构","slug":"垂直架构","link":"#垂直架构","children":[]},{"level":3,"title":"分布式架构","slug":"分布式架构","link":"#分布式架构","children":[]},{"level":3,"title":"SOA架构","slug":"soa架构","link":"#soa架构","children":[]},{"level":3,"title":"微服务架构","slug":"微服务架构","link":"#微服务架构","children":[]}]}],"readingTime":{"minutes":2.82,"words":846},"git":{"updatedTime":1713324297000,"contributors":[{"name":"YTAZWC","email":"18570354653@163.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/Dubbo/1.分布式系统中的相关概念.md"}`);export{m as comp,g as data};
