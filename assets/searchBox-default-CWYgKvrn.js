const t='{"documentCount":47,"nextId":47,"documentIds":{"0":"/article/wlhley8t/#画类图","1":"/java-concurrent/#学习视频","2":"/mysql-learn/#学习书籍","3":"/java-concurrent/#juc是什么","4":"/zookeeper/wz9jt6uj/#概述","5":"/java-concurrent/#前置知识","6":"/zookeeper/wz9jt6uj/#工作机制","7":"/zookeeper/wz9jt6uj/#应用场景","8":"/learn/#介绍","9":"/design-pattern/#学习视频","10":"/zookeeper/wz9jt6uj/#统一命名服务","11":"/design-pattern/biychupa/#设计模式的重要性","12":"/article/adrm6moe/#简介","13":"/design-pattern/#学习书籍","14":"/design-pattern/htacao8y/#基本介绍","15":"/zookeeper/wz9jt6uj/#统一配置管理","16":"/design-pattern/biychupa/#设计模式在软件中哪里","17":"/design-pattern/06w076lh/#基本介绍","18":"/design-pattern/nu3k3c27/#基本介绍","19":"/article/adrm6moe/#并行流和串行流","20":"/design-pattern/htacao8y/#应用实例","21":"/design-pattern/biychupa/#设计模式的目的","22":"/design-pattern/06w076lh/#应用实例","23":"/design-pattern/vys0x21y/#oo-面向对象-中继承的思考和说明","24":"/design-pattern/nu3k3c27/#应用实例","25":"/article/adrm6moe/#lambda-表达式","26":"/design-pattern/htacao8y/#方案1","27":"/design-pattern/biychupa/#设计模式常用七大原则","28":"/design-pattern/vys0x21y/#基本介绍","29":"/design-pattern/nu3k3c27/#方案-1","30":"/article/adrm6moe/#举例","31":"/design-pattern/htacao8y/#方案2","32":"/design-pattern/vys0x21y/#实例","33":"/design-pattern/nu3k3c27/#方案-2","34":"/article/adrm6moe/#基本使用","35":"/design-pattern/htacao8y/#方案3","36":"/design-pattern/vys0x21y/#错误示例","37":"/design-pattern/nu3k3c27/#依赖关系传递的三种方式","38":"/article/adrm6moe/#函数式-functional-接口","39":"/design-pattern/htacao8y/#注意事项和细节","40":"/design-pattern/nu3k3c27/#接口传递","41":"/article/adrm6moe/#方法引用和构造器引用","42":"/design-pattern/nu3k3c27/#构造方法传递","43":"/article/adrm6moe/#stream-api","44":"/design-pattern/nu3k3c27/#setter-方式传递","45":"/article/adrm6moe/#optional类","46":"/design-pattern/nu3k3c27/#注意事项和细节"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[1,1,1],"1":[1,1,2],"2":[1,1,2],"3":[1,1,5],"4":[1,1,3],"5":[1,1,8],"6":[1,2,1],"7":[1,2,2],"8":[1,1,2],"9":[1,1,3],"10":[1,3,8],"11":[1,1,16],"12":[1,1,17],"13":[1,1,1],"14":[1,1,9],"15":[1,3,13],"16":[2,1,11],"17":[1,1,3],"18":[1,1,30],"19":[1,2,7],"20":[1,1,2],"21":[1,1,40],"22":[1,1,90],"23":[3,1,21],"24":[1,1,3],"25":[2,1,7],"26":[1,2,50],"27":[2,1,10],"28":[1,1,31],"29":[2,2,68],"30":[1,3,42],"31":[1,2,58],"32":[1,1,1],"33":[2,2,60],"34":[1,3,57],"35":[1,2,57],"36":[1,2,74],"37":[1,1,1],"38":[3,1,1],"39":[1,1,12],"40":[1,2,47],"41":[1,1,1],"42":[1,2,43],"43":[2,1,1],"44":[2,2,44],"45":[1,1,1],"46":[1,1,10]},"averageFieldLength":[1.2340425531914898,1.425531914893617,20.765957446808514],"storedFields":{"0":{"title":"画类图","titles":[null]},"1":{"title":"学习视频","titles":[null]},"2":{"title":"学习书籍","titles":[null]},"3":{"title":"JUC是什么","titles":[null]},"4":{"title":"概述","titles":[null]},"5":{"title":"前置知识","titles":[null]},"6":{"title":"工作机制","titles":[null,"概述"]},"7":{"title":"应用场景","titles":[null,"概述"]},"8":{"title":"介绍","titles":[null]},"9":{"title":"学习视频","titles":[null]},"10":{"title":"统一命名服务","titles":[null,"概述","应用场景"]},"11":{"title":"设计模式的重要性","titles":[null]},"12":{"title":"简介","titles":[null]},"13":{"title":"学习书籍","titles":[null]},"14":{"title":"基本介绍","titles":[null]},"15":{"title":"统一配置管理","titles":[null,"概述","应用场景"]},"16":{"title":"设计模式在软件中哪里?","titles":[null]},"17":{"title":"基本介绍","titles":[null]},"18":{"title":"基本介绍","titles":[null]},"19":{"title":"并行流和串行流","titles":[null,"简介"]},"20":{"title":"应用实例","titles":[null]},"21":{"title":"设计模式的目的","titles":[null]},"22":{"title":"应用实例","titles":[null]},"23":{"title":"OO(面向对象) 中继承的思考和说明","titles":[null]},"24":{"title":"应用实例","titles":[null]},"25":{"title":"Lambda 表达式","titles":[null]},"26":{"title":"方案1","titles":[null,"应用实例"]},"27":{"title":"设计模式常用七大原则:","titles":[null]},"28":{"title":"基本介绍","titles":[null]},"29":{"title":"方案 1","titles":[null,"应用实例"]},"30":{"title":"举例","titles":[null,"Lambda 表达式"]},"31":{"title":"方案2","titles":[null,"应用实例"]},"32":{"title":"实例","titles":[null]},"33":{"title":"方案 2","titles":[null,"应用实例"]},"34":{"title":"基本使用","titles":[null,"Lambda 表达式"]},"35":{"title":"方案3","titles":[null,"应用实例"]},"36":{"title":"错误示例","titles":[null,"实例"]},"37":{"title":"依赖关系传递的三种方式","titles":[null]},"38":{"title":"函数式(Functional)接口","titles":[null]},"39":{"title":"注意事项和细节","titles":[null]},"40":{"title":"接口传递","titles":[null,"依赖关系传递的三种方式"]},"41":{"title":"方法引用和构造器引用","titles":[null]},"42":{"title":"构造方法传递","titles":[null,"依赖关系传递的三种方式"]},"43":{"title":"Stream API","titles":[null]},"44":{"title":"setter 方式传递","titles":[null,"依赖关系传递的三种方式"]},"45":{"title":"Optional类","titles":[null]},"46":{"title":"注意事项和细节","titles":[null]}},"dirtCount":0,"index":[["利于层序扩展和优化",{"2":{"46":1}}],["变量的声明类型尽量是抽象类或接口",{"2":{"46":1}}],["底层模块尽量都要有抽象类或接口",{"2":{"46":1}}],["构造器",{"2":{"42":1}}],["构造方法传递",{"0":{"42":1}}],["成员",{"2":{"42":1}}],["打开",{"2":{"40":1,"42":1,"44":1}}],["长虹电视机",{"2":{"40":1,"42":1,"44":1}}],["通过setter方法传递",{"2":{"44":1}}],["通过setter方法进行依赖传递",{"2":{"44":1}}],["通过构造方法依赖传递",{"2":{"42":1}}],["通过构造器进行依赖传递",{"2":{"42":1}}],["通过接口传递实现依赖",{"2":{"40":1}}],["通常情况下",{"2":{"39":1}}],["\\tprivate",{"2":{"44":1}}],["\\tpublic",{"2":{"40":2,"42":2,"44":7}}],["\\t",{"2":{"40":3,"42":3,"44":5}}],["\\t\\tthis",{"2":{"44":2}}],["\\t\\tsystem",{"2":{"40":1,"42":1,"44":1}}],["\\t\\t",{"2":{"40":1,"42":1,"44":1}}],["\\t\\topenandclose",{"2":{"40":2,"42":2,"44":3}}],["\\t\\tchanghong",{"2":{"40":1,"42":1,"44":1}}],["才可以在方法级保持单一职责原则",{"2":{"39":1}}],["才能在代码级违反单一职责原则",{"2":{"39":1}}],["只有类中方法数量足够少",{"2":{"39":1}}],["只有逻辑足够简单",{"2":{"39":1}}],["只是增加方法",{"2":{"35":1}}],["降低变更引起的风险",{"2":{"39":1}}],["降低类的复杂性",{"2":{"39":1}}],["提高类的可读性",{"2":{"39":1}}],["提供的服务",{"2":{"7":1}}],["注意事项和细节",{"0":{"39":1,"46":1}}],["函数式",{"0":{"38":1}}],["7",{"2":{"36":1}}],["重写的",{"2":{"36":1}}],["重写了父类的方法",{"2":{"36":1}}],["重用性",{"2":{"21":1}}],["9",{"2":{"36":2}}],["与",{"2":{"36":1}}],["新增了一个方法func2",{"2":{"36":1}}],["返回两个数的差",{"2":{"36":1}}],["functional",{"0":{"38":1}}],["func2",{"2":{"36":2}}],["func1的值",{"2":{"36":1}}],["func1",{"2":{"36":7}}],["8",{"2":{"36":3}}],["8=9",{"2":{"36":1}}],["8=",{"2":{"36":3}}],["07",{"2":{"36":1}}],["09",{"2":{"33":1}}],["liskov1",{"2":{"36":2}}],["liskov",{"2":{"36":2}}],["lambda体",{"2":{"34":1}}],["lambda形参列表",{"2":{"34":1}}],["lambda操作符",{"2":{"34":1}}],["lambda",{"0":{"25":1},"1":{"30":1,"34":1},"2":{"34":1}}],["lambda表达式的本质就是",{"2":{"34":1}}],["lambda表达式的本质是什么呢",{"2":{"34":1}}],["lambda表达式",{"2":{"12":1,"30":2,"34":2}}],["运行结果",{"2":{"36":1}}],["运行代码结果如下",{"2":{"31":1}}],["运行代码输出结果如下",{"2":{"26":1}}],["错误示例",{"0":{"36":1}}],["仍然遵守单一职责原则",{"2":{"35":1}}],["虽然没有在",{"2":{"35":1}}],["虽然不强制子类遵守",{"2":{"23":1}}],["考虑在交通工具类中",{"2":{"35":1}}],["还需要修改客户端",{"2":{"35":1}}],["还可能有微信",{"2":{"29":1}}],["作为接口的实例",{"2":{"34":1}}],["需要一个参数",{"2":{"34":1}}],["需要考虑所有的子类",{"2":{"23":1}}],["格式二",{"2":{"34":1}}],["格式一",{"2":{"34":1}}],["无意",{"2":{"36":1}}],["无返回值",{"2":{"34":1}}],["无参",{"2":{"34":1}}],["六种情况",{"2":{"34":1}}],["右边",{"2":{"34":1}}],["左边",{"2":{"34":1}}],["箭头操作符",{"2":{"34":1}}],["或者两者都有",{"2":{"46":1}}],["或",{"2":{"34":1}}],["符号含义",{"2":{"34":1}}],["基本使用",{"0":{"34":1}}],["基本介绍",{"0":{"14":1,"17":1,"18":1,"28":1}}],["微信信息",{"2":{"33":2}}],["微信",{"2":{"33":1}}],["电子邮件",{"2":{"33":1}}],["电子邮件信息",{"2":{"29":2,"33":2}}],["定义接口",{"2":{"33":1}}],["定义的所有程序",{"2":{"28":1}}],["客户端无需改变",{"2":{"33":1}}],["客户端不应该依赖它不需要的接口",{"2":{"17":1}}],["进行优化",{"2":{"33":1}}],["进程了解",{"2":{"5":1}}],["见方案3",{"2":{"31":1}}],["改动过大",{"2":{"35":1}}],["改动的代码会比较少",{"2":{"31":1}}],["改进",{"2":{"31":1}}],["直接修改vehicle类",{"2":{"31":1}}],["同时也需要修改客户端",{"2":{"31":1}}],["同时类图的具体实现代码如下所示",{"2":{"22":1}}],["遵守单一职责原则",{"2":{"31":1}}],["遵循里氏替换原则",{"2":{"28":1,"46":1}}],["分析",{"2":{"31":1,"35":1}}],["分解成不同的类",{"2":{"26":1,"31":1}}],["水路运行",{"2":{"31":1}}],["天空运行",{"2":{"31":2}}],["公路运行",{"2":{"31":3}}],["根据方案2中",{"2":{"35":1}}],["根据方案1",{"2":{"31":1}}],["根据依赖倒转原则",{"2":{"33":1}}],["根据不同的交通工具",{"2":{"26":1}}],["方法引用和构造器引用",{"0":{"41":1}}],["方法引用的写法",{"2":{"30":1}}],["方式传递",{"0":{"44":1}}],["方式6",{"2":{"34":1}}],["方式5",{"2":{"34":1}}],["方式4",{"2":{"34":1}}],["方式3",{"2":{"34":1,"44":1}}],["方式2",{"2":{"34":1,"42":1}}],["方式1",{"2":{"34":1,"40":1}}],["方式1完成",{"2":{"33":1}}],["方案3分析",{"2":{"35":1}}],["方案3",{"0":{"35":1},"2":{"35":1}}],["方案2分析",{"2":{"31":1}}],["方案2",{"0":{"31":1},"2":{"31":1,"33":1}}],["方案",{"0":{"29":1,"33":1}}],["方案1",{"0":{"26":1},"2":{"26":1,"29":1}}],["3",{"2":{"36":4}}],["3=14",{"2":{"36":1}}],["3=8",{"2":{"36":1}}],["3=",{"2":{"36":2}}],["32",{"2":{"30":1}}],["3方法",{"2":{"22":2}}],["x3c",{"2":{"30":4,"34":3}}],[">",{"2":{"30":2,"34":2}}],["我们应当遵守单一职责原则",{"2":{"39":1}}],["我们获取消息的对象不只是电子邮件",{"2":{"29":1}}],["我爱北京故宫",{"2":{"30":1,"34":1}}],["我爱北京天安门",{"2":{"30":1,"34":1}}],["由匿名内部类转换到lambda表达式",{"2":{"30":1}}],["由上述类图结合具体实现代码中",{"2":{"22":1}}],["举例",{"0":{"30":1}}],["这样在变量引用和实际对象间",{"2":{"46":1}}],["这里本意是求出",{"2":{"36":1}}],["这种修改方法没有对原来的类做大的修改",{"2":{"35":1}}],["这些类实现",{"2":{"29":1}}],["这是很没有必要的",{"2":{"22":1}}],["watervehicle",{"2":{"31":4}}],["weixin",{"2":{"29":1,"33":2}}],["world",{"2":{"29":2,"33":4}}],["表示接收者",{"2":{"29":1}}],["表达式",{"0":{"25":1},"1":{"30":1,"34":1}}],["引入一个抽象的接口",{"2":{"29":1}}],["引擎",{"2":{"12":1}}],["得到解决思路",{"2":{"29":1}}],["短信等",{"2":{"29":2}}],["且比较容易想到",{"2":{"29":1}}],["简单",{"2":{"29":1}}],["简介",{"0":{"12":1},"1":{"19":1}}],["完成person接收消息的功能",{"2":{"29":1,"33":1}}],["hello",{"2":{"29":2,"33":4}}],["generated",{"2":{"40":1}}],["getinfo",{"2":{"29":2,"33":4}}],["gt",{"2":{"16":3,"34":1}}],["extends",{"2":{"36":1}}],["email",{"2":{"29":6,"33":2}}],["effective",{"2":{"21":1}}],["roadvehicle",{"2":{"31":6}}],["r2",{"2":{"30":2,"34":2}}],["r1",{"2":{"30":2,"34":2}}],["return",{"2":{"29":1,"30":1,"33":2,"36":3}}],["receiver",{"2":{"33":2}}],["receive",{"2":{"29":2,"33":3}}],["runair",{"2":{"35":2}}],["runwater",{"2":{"35":2}}],["runnable",{"2":{"30":3,"34":3}}],["run",{"2":{"26":4,"30":3,"31":6,"34":3,"35":2}}],["53",{"2":{"35":1}}],["56",{"2":{"29":1}}],["5方法",{"2":{"22":2}}],["采用的是直接实现方式",{"2":{"29":1}}],["组合",{"2":{"28":1}}],["那么类型",{"2":{"28":1}}],["时",{"2":{"28":1}}],["都代换成",{"2":{"28":1}}],["都有类型为",{"2":{"28":1}}],["合成复用原则",{"2":{"27":1}}],["迪米特原则",{"2":{"27":1}}],["开关的接口",{"2":{"40":1}}],["开闭原则ocp",{"2":{"27":1}}],["开发工具与jvm带来了大量新特性",{"2":{"12":1}}],["里氏代换原则",{"2":{"27":1}}],["里氏替换原则说明",{"2":{"28":1}}],["里氏替换原则",{"2":{"23":1}}],["原则",{"2":{"27":1}}],["原则的中心思想是",{"2":{"18":1}}],["单一职责原则",{"2":{"27":1}}],["详见方案2",{"2":{"26":1}}],["详情",{"2":{"22":1}}],["将交通工具类的不同",{"2":{"31":1}}],["将该类进行拆分",{"2":{"26":1}}],["将代码像数据一样进行传递",{"2":{"25":1}}],["解决问题",{"2":{"28":1}}],["解决办法",{"2":{"26":1}}],["解决了什么问题",{"2":{"11":1}}],["又负责飞机的运行等",{"2":{"26":1}}],["显然违反了单一职责原则",{"2":{"26":1}}],["轮船",{"2":{"26":1,"31":2,"35":2}}],["+",{"2":{"26":1,"31":3,"35":3,"36":7}}],["交通工具类",{"2":{"26":1}}],["飞机",{"2":{"26":2,"31":2,"35":2}}],["汽车",{"2":{"26":1,"35":2}}],["摩托车",{"2":{"26":2,"31":2}}],["vehicle2",{"2":{"35":7}}],["vehicle",{"2":{"26":9,"31":6,"35":6}}],["void",{"2":{"22":39,"26":2,"29":2,"30":3,"31":4,"33":2,"34":4,"35":4,"36":1,"40":5,"42":5,"44":7}}],["来代表交通工具",{"2":{"26":1}}],["本质",{"2":{"25":1}}],["便是解决编程中",{"2":{"23":1}}],["便于其他程序员阅读和理解",{"2":{"21":1}}],["便于并行",{"2":{"12":1}}],["便于识别",{"2":{"10":1}}],["涉及到子类的功能也有可能会出现故障",{"2":{"23":1}}],["则对应的",{"2":{"29":1}}],["则当这个类需要修改时",{"2":{"23":1}}],["则会对client发出通知",{"2":{"15":1}}],["增加对象间的耦合性",{"2":{"23":1}}],["程序稳定性更好",{"2":{"46":1}}],["程序",{"2":{"28":1}}],["程序的可移植性降低",{"2":{"23":1}}],["程序员面临着来自",{"2":{"21":1}}],["比如使用继承会给程序带来侵入性",{"2":{"23":1}}],["比如kafka集群",{"2":{"15":1}}],["也带来了弊端",{"2":{"23":1}}],["继承时",{"2":{"46":1}}],["继承实际上让两个类的耦合性增加了",{"2":{"28":1}}],["继承给程序设计带来遍历的同时",{"2":{"23":1}}],["继承隐含的含义",{"2":{"23":1}}],["父类已经实现好的方法",{"2":{"23":1}}],["nums2",{"2":{"36":6}}],["nums1",{"2":{"36":6}}],["new",{"2":{"22":8,"26":1,"29":2,"30":2,"31":3,"33":3,"34":2,"35":1,"36":2,"40":2,"42":2,"44":2}}],["nashorn",{"2":{"12":1}}],["测试",{"2":{"22":1}}],["11+3+9=23",{"2":{"36":1}}],["11+3+9=",{"2":{"36":1}}],["11",{"2":{"36":8}}],["17",{"2":{"33":1}}],["12",{"2":{"30":1}}],["1",{"0":{"29":1},"2":{"33":1,"36":7}}],["18",{"2":{"22":1}}],["15",{"2":{"22":1,"26":1,"31":1,"35":1}}],["16",{"2":{"22":1,"29":2,"33":1,"36":1}}],["this",{"2":{"42":2}}],["tv",{"2":{"40":3,"42":5,"44":6}}],["test3",{"2":{"34":1}}],["test2",{"2":{"30":1}}],["test1",{"2":{"30":1,"34":1}}],["test",{"2":{"30":2,"34":2}}],["t2",{"2":{"28":2}}],["t1",{"2":{"28":3}}],["todo",{"2":{"22":1,"36":1,"40":1}}],["top",{"2":{"22":3,"26":1,"29":2,"31":1,"33":2,"35":1,"36":2}}],["title",{"2":{"22":1,"29":1,"33":1,"36":1}}],["花木凋零成兰",{"2":{"22":1,"26":1,"29":1,"31":1,"33":1,"35":1,"36":1}}],["输出结果",{"2":{"22":1,"29":1,"33":1}}],["具体实现代码和结果如下所示",{"2":{"36":1}}],["具体代码",{"2":{"22":1,"29":1,"33":1,"36":1}}],["具有更好的",{"2":{"21":1}}],["保证类a的依赖最小接口",{"2":{"22":1}}],["因此按照接口隔离原则来进行分析",{"2":{"22":1}}],["但是在方法级别上",{"2":{"35":1}}],["但是没有返回值",{"2":{"34":1}}],["但是改动过大",{"2":{"31":1}}],["但是",{"2":{"29":1}}],["但是子类对父类已实现方法随机修改的话",{"2":{"23":1}}],["但是类b必须实现interface1中的所有方法",{"2":{"22":1}}],["但是类a只会使用到interface1中的三个方法",{"2":{"22":1}}],["但是指挥用到1",{"2":{"22":4}}],["47",{"2":{"31":1}}],["44",{"2":{"26":1}}],["4",{"2":{"22":3,"26":1,"29":1,"31":1,"33":1,"35":1,"36":1}}],["20",{"2":{"36":1}}],["2024",{"2":{"22":1,"26":1,"29":1,"31":1,"33":1,"35":1,"36":1}}],["21",{"2":{"30":4}}],["22",{"2":{"26":1,"31":1,"35":1}}],["2",{"0":{"33":1},"2":{"22":2}}],["依赖关系传递的三种方式",{"0":{"37":1},"1":{"40":1,"42":1,"44":1}}],["依赖",{"2":{"22":4,"28":1}}],["依赖倒转",{"2":{"18":1,"27":1}}],["依赖倒转原则的设计理念",{"2":{"18":1}}],["依赖倒转原则",{"2":{"18":1}}],["类级别上遵守单一职责原则",{"2":{"35":1}}],["类依赖接口",{"2":{"29":1}}],["类也需要增加对应的接收方法",{"2":{"29":1}}],["类接收消息的功能",{"2":{"24":1}}],["类a通过接口interface1依赖使用类b",{"2":{"22":1}}],["类通过接口interface1",{"2":{"22":4}}],["类库",{"2":{"12":1}}],["实例",{"0":{"32":1},"1":{"36":1}}],["实例2",{"2":{"30":1}}],["实例1",{"2":{"30":1}}],["实现接口",{"2":{"40":1,"44":1}}],["实现三个对应不同交通工具的方法",{"2":{"35":1}}],["实现代码及输出结果如下所示",{"2":{"29":1,"33":1}}],["实现了",{"2":{"22":22}}],["实际上是在设定规范和契约",{"2":{"23":1}}],["实际项目中使用过什么设计模式",{"2":{"11":1}}],["b类继承了a",{"2":{"36":1}}],["b类",{"2":{"22":2}}],["b",{"2":{"22":16,"36":7}}],["ytazwc",{"2":{"22":3,"26":1,"29":2,"31":1,"33":2,"35":1,"36":2}}],["play",{"2":{"40":3,"42":3,"44":3}}],["p",{"2":{"28":2}}],["person",{"2":{"24":1,"29":7,"33":6}}],["println",{"2":{"22":16,"26":1,"29":1,"30":7,"31":3,"33":1,"34":6,"35":3,"36":6,"40":1,"42":1,"44":1}}],["principle",{"2":{"18":1,"22":3,"26":1,"29":2,"31":1,"33":2,"35":1,"36":2}}],["public",{"2":{"22":31,"26":3,"29":4,"30":4,"31":5,"33":6,"34":4,"35":5,"36":5,"40":4,"42":6,"44":1}}],["package",{"2":{"22":3,"26":1,"29":2,"31":1,"33":2,"35":1,"36":2}}],["点击查看代码",{"2":{"40":1,"42":1,"44":1}}],["点击查看",{"2":{"22":1}}],["若对类图理解不够清楚",{"2":{"22":1}}],["首先查看下面的uml类图",{"2":{"22":1}}],["就存在一个缓冲层",{"2":{"46":1}}],["就是接口的实例",{"2":{"25":1}}],["就是一个线程上",{"2":{"19":1}}],["就曾经说过",{"2":{"21":1}}],["changhong",{"2":{"40":4,"42":4,"44":4}}],["con1",{"2":{"34":2}}],["con",{"2":{"34":2}}],["consumer",{"2":{"34":3}}],["concurrent在并发编程中使用的工具包",{"2":{"3":1}}],["com3",{"2":{"30":2}}],["com2",{"2":{"30":2}}],["compare3",{"2":{"30":2}}],["compare2",{"2":{"30":2}}],["compare1",{"2":{"30":2}}],["compare",{"2":{"30":7}}],["comparator",{"2":{"30":4}}],["com1",{"2":{"30":2}}],["c类通过接口去依赖d类",{"2":{"22":1}}],["c",{"2":{"22":10}}],["class",{"2":{"22":10,"26":2,"29":3,"31":4,"33":4,"35":2,"36":3,"40":3,"42":3,"44":3}}],["c++新手的区别就是前者手背上有很多伤疤",{"2":{"21":1}}],["c++老手和",{"2":{"21":1}}],["c++",{"2":{"21":1}}],["method",{"2":{"40":1}}],["main",{"2":{"22":1,"26":1,"29":1,"31":1,"33":1,"35":1,"36":1,"40":1,"42":1,"44":1}}],["mayers",{"2":{"21":1}}],["mysql是怎样运行的",{"2":{"2":1}}],["settv",{"2":{"44":3}}],["setter",{"0":{"44":1}}],["segregation1",{"2":{"22":3}}],["segregation",{"2":{"22":3}}],["s",{"2":{"34":4}}],["singleresponsibility3",{"2":{"35":1}}],["singleresponsibility2",{"2":{"31":1}}],["singleresponsibility1",{"2":{"26":1}}],["singleresponsibility",{"2":{"26":1,"31":1,"35":1}}],["stub",{"2":{"40":1}}],["string>",{"2":{"34":3}}],["string",{"2":{"22":1,"26":2,"29":2,"31":4,"33":4,"34":1,"35":4,"36":1,"40":1,"42":1,"44":1}}],["stream",{"0":{"43":1},"2":{"12":1}}],["static",{"2":{"22":1,"26":1,"29":1,"31":1,"33":1,"35":1,"36":1,"40":1,"42":1,"44":1}}],["system",{"2":{"22":16,"26":1,"29":1,"30":7,"31":3,"33":1,"34":6,"35":3,"36":6}}],["scott",{"2":{"21":1}}],["的和",{"2":{"36":1}}],["的子类型",{"2":{"28":1}}],["的行为没有发生变化",{"2":{"28":1}}],["的对象",{"2":{"28":2}}],["的精要",{"2":{"21":1}}],["的各种问题",{"2":{"11":1}}],["description",{"2":{"22":1,"29":1,"33":1,"36":1}}],["dependencypass",{"2":{"40":1,"42":1,"44":1}}],["dependencyinversion",{"2":{"29":3,"33":4}}],["dependence",{"2":{"18":1}}],["dependecyinversion",{"2":{"29":1}}],["depend5",{"2":{"22":3}}],["depend4",{"2":{"22":3}}],["depend3",{"2":{"22":3}}],["depend2",{"2":{"22":3}}],["depend1",{"2":{"22":6}}],["date",{"2":{"22":1,"26":1,"29":1,"31":1,"33":1,"35":1,"36":1}}],["d类",{"2":{"22":2}}],["d",{"2":{"21":1,"22":16}}],["你就懂了面向对象分析和设计",{"2":{"21":1}}],["懂了设计模式",{"2":{"21":1}}],["金句",{"2":{"21":1}}],["低耦合的特性",{"2":{"21":1}}],["高内聚",{"2":{"21":1}}],["高层模块不应该依赖底层模块",{"2":{"18":1}}],["使得以",{"2":{"28":1}}],["使程序呈现",{"2":{"21":1}}],["使用一个类",{"2":{"26":1}}],["使用lambda表达式可以写出更简洁更灵活的代码",{"2":{"25":1}}],["使用",{"2":{"22":4,"34":1}}],["使用接口或抽象类的目的是制定好规范",{"2":{"18":1}}],["使用到多种设计模式",{"2":{"16":1}}],["当增加新的功能时",{"2":{"21":1}}],["当职责1需求变更而改变a时",{"2":{"14":1}}],["非常方便",{"2":{"21":1}}],["不用多次编写",{"2":{"21":1}}],["代码运行结果如下",{"2":{"35":1}}],["代码重用性",{"2":{"21":1}}],["代码更少",{"2":{"12":1}}],["软件",{"2":{"21":1}}],["软件工程中",{"2":{"11":1}}],["灵活性等多方面的挑战",{"2":{"21":1}}],["内聚性及可维护性",{"2":{"21":1}}],["耦合性",{"2":{"21":1}}],["编写软件过程中",{"2":{"21":1}}],["编译器",{"2":{"12":1}}],["以交通工具运行为例",{"2":{"20":1}}],["以抽象为基础搭建的架构比以细节为基础搭建的架构要更稳定",{"2":{"18":1}}],["应用实例",{"0":{"20":1,"22":1,"24":1},"1":{"26":1,"29":1,"31":1,"33":1,"35":1}}],["应用场景",{"0":{"7":1},"1":{"10":1,"15":1}}],["从上到下运行程序",{"2":{"19":1}}],["串行流",{"2":{"19":1}}],["并且修改后",{"2":{"23":1}}],["并用不同的线程分别处理每个数据块的流",{"2":{"19":1}}],["并行流就是把一个内容分为多个数据块",{"2":{"19":1}}],["并行流和串行流",{"0":{"19":1}}],["把展现的细节的任务交给他们的实现类去完成",{"2":{"18":1}}],["细节就是具体的实现类",{"2":{"18":1}}],["细节应该依赖抽象",{"2":{"18":1}}],["中继承的思考和说明",{"0":{"23":1}}],["中",{"2":{"18":1}}],["在水中上运行",{"2":{"35":2}}],["在天空上运行",{"2":{"35":2}}],["在适当的情况下",{"2":{"28":1}}],["在子类中尽量不要重写父类的方法",{"2":{"28":1}}],["在所有的对象",{"2":{"28":1}}],["在公路上运行",{"2":{"26":4,"35":2}}],["在其巨著",{"2":{"21":1}}],["在",{"2":{"18":1}}],["在分布式环境下",{"2":{"10":1,"15":1}}],["相对于细节的多变性",{"2":{"18":1}}],["面向接口编程",{"2":{"18":1}}],["面向对象",{"0":{"23":1},"2":{"16":1}}],["倒置",{"2":{"18":1,"27":1}}],["抽象方法",{"2":{"40":1,"42":1,"44":1}}],["抽象指的是接口或抽象类",{"2":{"18":1}}],["抽象的东西要更稳定",{"2":{"18":1}}],["抽象不应该依赖细节",{"2":{"18":1}}],["抽象类",{"2":{"18":1}}],["而不涉及任何具体的操作",{"2":{"18":1}}],["而不是依赖一个具体的子类",{"2":{"18":1}}],["而域名容易记住",{"2":{"10":1}}],["接收接口",{"2":{"40":1}}],["接收消息",{"2":{"29":1}}],["接口传递",{"0":{"40":1}}],["接口即可",{"2":{"29":1}}],["接口隔离原则",{"2":{"27":1}}],["接口3",{"2":{"22":1}}],["接口2",{"2":{"22":1}}],["接口1",{"2":{"22":1}}],["接口",{"0":{"38":1},"2":{"18":1,"22":1}}],["接受维护项目",{"2":{"11":1}}],["如果新增这些类",{"2":{"29":1}}],["如果对每个类型为",{"2":{"28":1}}],["如果一个类被其他的类所继承",{"2":{"23":1}}],["如下所示",{"2":{"26":1,"31":1,"35":1}}],["如何正确使用继承的原则",{"2":{"23":1}}],["如",{"2":{"18":1}}],["如类a负责两个不同的职责",{"2":{"14":1}}],["二者都应该依赖其抽象",{"2":{"18":1}}],["是类型",{"2":{"28":1}}],["是一个匿名函数",{"2":{"25":1}}],["是指",{"2":{"18":1}}],["是对软件设计中普遍存在",{"2":{"11":1}}],["服务器集群",{"2":{"16":1}}],["服务进行统一命名",{"2":{"10":1}}],["架构",{"2":{"16":1}}],["框架",{"2":{"16":1}}],["功能模块",{"2":{"16":1}}],["=",{"2":{"16":3,"22":2,"26":1,"29":1,"30":8,"31":3,"33":1,"34":4,"35":1,"36":2,"40":2,"42":3,"44":3}}],["override",{"2":{"30":2,"33":2,"34":2,"40":1,"42":1,"44":1}}],["o2",{"2":{"28":2,"30":4}}],["o1",{"2":{"28":2,"30":4}}],["out",{"2":{"22":16,"26":1,"29":1,"30":7,"31":3,"33":1,"34":6,"35":3,"36":6,"40":1,"42":1,"44":1}}],["open",{"2":{"40":3,"42":3,"44":3}}],["openandclose",{"2":{"40":3,"42":4,"44":3}}],["operation5",{"2":{"22":11}}],["operation4",{"2":{"22":11}}],["operation3",{"2":{"22":11}}],["operation2",{"2":{"22":11}}],["operation1",{"2":{"22":16}}],["optional类",{"0":{"45":1},"2":{"12":1}}],["ooa",{"2":{"21":1}}],["oo",{"0":{"23":1},"2":{"16":1}}],["一个类只负责一种职责",{"2":{"39":1}}],["一个类对于另一个类的依赖应该建立在最小接口上",{"2":{"22":1}}],["一旦znode中的数据发生修改",{"2":{"15":1}}],["一边要求一个集群中",{"2":{"15":1}}],["各个客户端服务器监听这个znode",{"2":{"15":1}}],["配置管理可交由zookeeper实现",{"2":{"15":1}}],["配置文件同步非常常见",{"2":{"15":1}}],["希望能够快速同步到各个节点上",{"2":{"15":1}}],["对类分解的同时",{"2":{"35":1}}],["对类来说",{"2":{"14":1}}],["对方案",{"2":{"33":1}}],["对于属于接收消息范围的",{"2":{"29":1}}],["对于类c也是同理",{"2":{"22":1}}],["对该方案进行分析",{"2":{"29":1}}],["对原来功能没有影响",{"2":{"21":1}}],["对配置信息修改后",{"2":{"15":1}}],["统一配置管理",{"0":{"15":1}}],["统一命名服务",{"0":{"10":1}}],["auto",{"2":{"40":1}}],["author",{"2":{"22":1,"26":1,"29":1,"31":1,"33":1,"35":1,"36":1}}],["a类",{"2":{"36":1}}],["a类通过接口去依赖b类",{"2":{"22":1}}],["accept",{"2":{"34":3}}],["airvehicle",{"2":{"31":5}}],["args",{"2":{"22":1,"26":1,"29":1,"31":1,"33":1,"35":1,"36":1,"40":1,"42":1,"44":1}}],["a",{"2":{"22":10,"36":7}}],["a2",{"2":{"14":1}}],["api",{"0":{"43":1},"2":{"12":1}}],["所有的引用基类的地方必须能透明的使用其子类的对象",{"2":{"28":1}}],["所有节点的配置信息是一致的",{"2":{"15":1}}],["所以根据依赖倒转原则进行分析",{"2":{"29":1}}],["所以我们可以将接口interface1拆分为几个接口",{"2":{"22":1}}],["所以需要将类a的粒度分解为a1",{"2":{"14":1}}],["所提出的解决方案",{"2":{"11":1}}],["可维护性",{"2":{"39":1}}],["可能是",{"2":{"36":1}}],["可能还以为调用的是父类的func1方法",{"2":{"36":1}}],["可能意识的重写了父类的方法",{"2":{"36":1}}],["可能会对整个继承体系造成破坏",{"2":{"23":1}}],["可能造成职责2执行错误",{"2":{"14":1}}],["可以通过聚合",{"2":{"28":1}}],["可以把lambda表达式理解为一段可以传递的代码",{"2":{"25":1}}],["可以发现",{"2":{"22":1}}],["可以查看下面的实现代码",{"2":{"22":1}}],["可以很大程度上提高程序的执行效率",{"2":{"19":1}}],["可靠性",{"2":{"21":1}}],["可扩展性",{"2":{"21":1}}],["可将配置信息写入zookeeper上的一个znode",{"2":{"15":1}}],["可读性",{"2":{"11":1,"21":1}}],["职责1和职责2",{"2":{"14":1}}],["即求",{"2":{"36":1}}],["即在使用继承的过程中",{"2":{"36":1}}],["即在使用继承时",{"2":{"28":1}}],["即重写的抽象方法的方法体",{"2":{"34":1}}],["即接口中的抽象方法的形参列表",{"2":{"34":1}}],["即将类分解",{"2":{"31":1}}],["即符合依赖倒转原则",{"2":{"29":1}}],["即有细节依赖抽象",{"2":{"29":1}}],["即负责摩托车在公路上",{"2":{"26":1}}],["即",{"2":{"23":1,"28":1}}],["即可以得到以下类图",{"2":{"22":1}}],["即增加新的功能时",{"2":{"21":1}}],["即编程规范",{"2":{"21":1}}],["即相同功能的代码",{"2":{"21":1}}],["即一个类对另外一个类的依赖应该建立在更小的接口上",{"2":{"17":1}}],["即一个类应该只负责一项职责",{"2":{"14":1}}],["即维护性",{"2":{"11":1}}],["允许jvm上运行js应用",{"2":{"12":1}}],["最大化减少空指针异常",{"2":{"12":1}}],["速度更快",{"2":{"12":1}}],["为java语言",{"2":{"12":1}}],["为分布式框架提供协调服务的apache项目",{"2":{"4":1}}],["怎么使用的",{"2":{"11":1}}],["大厂提问",{"2":{"11":1}}],["规范性",{"2":{"11":1}}],["目前程序员门槛越来越高",{"2":{"11":1}}],["反复出现",{"2":{"11":1}}],["设计模式常用七大原则",{"0":{"27":1}}],["设计模式包含了面向对象的精髓",{"2":{"21":1}}],["设计模式是为了让程序",{"2":{"21":1}}],["设计模式的目的",{"0":{"21":1}}],["设计模式的重要性",{"0":{"11":1}}],["设计模式+数据结构",{"2":{"16":1}}],["设计模式在软件中哪里",{"0":{"16":1}}],["设计模式",{"2":{"11":1}}],["itv接口",{"2":{"40":1,"42":1,"44":1}}],["itv",{"2":{"40":4,"42":4,"44":5}}],["iopenandclose",{"2":{"40":2,"42":2,"44":2}}],["ireceiver",{"2":{"29":3,"33":4}}],["improve",{"2":{"22":1,"33":2}}],["implements",{"2":{"22":4,"33":2,"40":2,"42":2,"44":2}}],["i",{"2":{"22":24}}],["int",{"2":{"30":4,"36":9}}],["integer",{"2":{"30":5}}],["integer>",{"2":{"30":4}}],["interface3",{"2":{"22":4}}],["interface2",{"2":{"22":4}}],["interface1",{"2":{"22":14}}],["interface",{"2":{"22":4,"33":1,"40":2,"42":2,"44":2}}],["inversion",{"2":{"18":1}}],["ip不容易记住",{"2":{"10":1}}],["idea工具熟练",{"2":{"5":1}}],["例如",{"2":{"10":1}}],["经常需要对应用",{"2":{"10":1}}],["图解+框架源码剖析",{"2":{"9":1}}],["尚硅谷java设计模式",{"2":{"9":1}}],["主要为学习各种开发技术专用",{"2":{"8":1}}],["介绍",{"0":{"8":1}}],["工作机制",{"0":{"6":1}}],["有一定线程",{"2":{"5":1}}],["有java基础",{"2":{"5":1}}],["了解java新特性",{"2":{"5":1}}],["前置知识",{"0":{"5":1}}],["zookeeper是一个开源的分布式的",{"2":{"4":1}}],["概述",{"0":{"4":1},"1":{"6":1,"7":1,"10":1,"15":1}}],["util",{"2":{"3":1}}],["java8",{"2":{"12":1}}],["java8新特性",{"2":{"5":1}}],["java",{"2":{"3":1,"18":1}}],["juc入门",{"2":{"5":1}}],["juc是什么",{"0":{"3":1}}],["juc并发编程",{"2":{"1":1}}],["指",{"2":{"3":1}}],["学习书籍",{"0":{"2":1,"13":1}}],["学习视频",{"0":{"1":1,"9":1}}],["画类图",{"0":{"0":1}}]],"serializationVersion":2}';export{t as default};
