const t='{"documentCount":41,"nextId":41,"documentIds":{"0":"/article/wlhley8t/#画类图","1":"/java-concurrent/#学习视频","2":"/java-concurrent/#juc是什么","3":"/learn/#介绍","4":"/java-concurrent/#前置知识","5":"/design-pattern/#学习视频","6":"/design-pattern/biychupa/#设计模式的重要性","7":"/article/adrm6moe/#简介","8":"/design-pattern/#学习书籍","9":"/design-pattern/htacao8y/#基本介绍","10":"/design-pattern/biychupa/#设计模式在软件中哪里","11":"/article/adrm6moe/#并行流和串行流","12":"/design-pattern/htacao8y/#应用实例","13":"/design-pattern/06w076lh/#基本介绍","14":"/design-pattern/biychupa/#设计模式的目的","15":"/design-pattern/nu3k3c27/#基本介绍","16":"/article/adrm6moe/#lambda-表达式","17":"/design-pattern/htacao8y/#方案1","18":"/design-pattern/06w076lh/#应用实例","19":"/design-pattern/vys0x21y/#oo-面向对象-中继承的思考和说明","20":"/design-pattern/biychupa/#设计模式常用七大原则","21":"/design-pattern/nu3k3c27/#应用实例","22":"/article/adrm6moe/#举例","23":"/design-pattern/htacao8y/#方案2","24":"/design-pattern/vys0x21y/#基本介绍","25":"/design-pattern/nu3k3c27/#方案-1","26":"/article/adrm6moe/#基本使用","27":"/design-pattern/htacao8y/#方案3","28":"/design-pattern/vys0x21y/#实例","29":"/design-pattern/nu3k3c27/#方案-2","30":"/article/adrm6moe/#函数式-functional-接口","31":"/design-pattern/htacao8y/#注意事项和细节","32":"/design-pattern/vys0x21y/#错误示例","33":"/design-pattern/nu3k3c27/#依赖关系传递的三种方式","34":"/article/adrm6moe/#方法引用和构造器引用","35":"/design-pattern/nu3k3c27/#接口传递","36":"/article/adrm6moe/#stream-api","37":"/design-pattern/nu3k3c27/#构造方法传递","38":"/article/adrm6moe/#optional类","39":"/design-pattern/nu3k3c27/#setter-方式传递","40":"/design-pattern/nu3k3c27/#注意事项和细节"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[1,1,1],"1":[1,1,2],"2":[1,1,5],"3":[1,1,2],"4":[1,1,8],"5":[1,1,3],"6":[1,1,16],"7":[1,1,17],"8":[1,1,1],"9":[1,1,9],"10":[2,1,11],"11":[1,2,7],"12":[1,1,2],"13":[1,1,3],"14":[1,1,40],"15":[1,1,30],"16":[2,1,7],"17":[1,2,50],"18":[1,1,90],"19":[3,1,21],"20":[2,1,10],"21":[1,1,3],"22":[1,3,42],"23":[1,2,58],"24":[1,1,31],"25":[2,2,68],"26":[1,3,57],"27":[1,2,57],"28":[1,1,1],"29":[2,2,60],"30":[3,1,1],"31":[1,1,12],"32":[1,2,74],"33":[1,1,1],"34":[1,1,1],"35":[1,2,47],"36":[2,1,1],"37":[1,2,43],"38":[1,1,1],"39":[2,2,44],"40":[1,1,10]},"averageFieldLength":[1.2682926829268293,1.3414634146341464,23.097560975609756],"storedFields":{"0":{"title":"画类图","titles":[null]},"1":{"title":"学习视频","titles":[null]},"2":{"title":"JUC是什么","titles":[null]},"3":{"title":"介绍","titles":[null]},"4":{"title":"前置知识","titles":[null]},"5":{"title":"学习视频","titles":[null]},"6":{"title":"设计模式的重要性","titles":[null]},"7":{"title":"简介","titles":[null]},"8":{"title":"学习书籍","titles":[null]},"9":{"title":"基本介绍","titles":[null]},"10":{"title":"设计模式在软件中哪里?","titles":[null]},"11":{"title":"并行流和串行流","titles":[null,"简介"]},"12":{"title":"应用实例","titles":[null]},"13":{"title":"基本介绍","titles":[null]},"14":{"title":"设计模式的目的","titles":[null]},"15":{"title":"基本介绍","titles":[null]},"16":{"title":"Lambda 表达式","titles":[null]},"17":{"title":"方案1","titles":[null,"应用实例"]},"18":{"title":"应用实例","titles":[null]},"19":{"title":"OO(面向对象) 中继承的思考和说明","titles":[null]},"20":{"title":"设计模式常用七大原则:","titles":[null]},"21":{"title":"应用实例","titles":[null]},"22":{"title":"举例","titles":[null,"Lambda 表达式"]},"23":{"title":"方案2","titles":[null,"应用实例"]},"24":{"title":"基本介绍","titles":[null]},"25":{"title":"方案 1","titles":[null,"应用实例"]},"26":{"title":"基本使用","titles":[null,"Lambda 表达式"]},"27":{"title":"方案3","titles":[null,"应用实例"]},"28":{"title":"实例","titles":[null]},"29":{"title":"方案 2","titles":[null,"应用实例"]},"30":{"title":"函数式(Functional)接口","titles":[null]},"31":{"title":"注意事项和细节","titles":[null]},"32":{"title":"错误示例","titles":[null,"实例"]},"33":{"title":"依赖关系传递的三种方式","titles":[null]},"34":{"title":"方法引用和构造器引用","titles":[null]},"35":{"title":"接口传递","titles":[null,"依赖关系传递的三种方式"]},"36":{"title":"Stream API","titles":[null]},"37":{"title":"构造方法传递","titles":[null,"依赖关系传递的三种方式"]},"38":{"title":"Optional类","titles":[null]},"39":{"title":"setter 方式传递","titles":[null,"依赖关系传递的三种方式"]},"40":{"title":"注意事项和细节","titles":[null]}},"dirtCount":0,"index":[["利于层序扩展和优化",{"2":{"40":1}}],["变量的声明类型尽量是抽象类或接口",{"2":{"40":1}}],["底层模块尽量都要有抽象类或接口",{"2":{"40":1}}],["构造器",{"2":{"37":1}}],["构造方法传递",{"0":{"37":1}}],["成员",{"2":{"37":1}}],["打开",{"2":{"35":1,"37":1,"39":1}}],["长虹电视机",{"2":{"35":1,"37":1,"39":1}}],["method",{"2":{"35":1}}],["main",{"2":{"17":1,"18":1,"23":1,"25":1,"27":1,"29":1,"32":1,"35":1,"37":1,"39":1}}],["mayers",{"2":{"14":1}}],["通过setter方法传递",{"2":{"39":1}}],["通过setter方法进行依赖传递",{"2":{"39":1}}],["通过构造方法依赖传递",{"2":{"37":1}}],["通过构造器进行依赖传递",{"2":{"37":1}}],["通过接口传递实现依赖",{"2":{"35":1}}],["通常情况下",{"2":{"31":1}}],["\\tprivate",{"2":{"39":1}}],["\\tpublic",{"2":{"35":2,"37":2,"39":7}}],["\\t",{"2":{"35":3,"37":3,"39":5}}],["\\t\\tthis",{"2":{"39":2}}],["\\t\\tsystem",{"2":{"35":1,"37":1,"39":1}}],["\\t\\t",{"2":{"35":1,"37":1,"39":1}}],["\\t\\topenandclose",{"2":{"35":2,"37":2,"39":3}}],["\\t\\tchanghong",{"2":{"35":1,"37":1,"39":1}}],["7",{"2":{"32":1}}],["重写的",{"2":{"32":1}}],["重写了父类的方法",{"2":{"32":1}}],["重用性",{"2":{"14":1}}],["9",{"2":{"32":2}}],["与",{"2":{"32":1}}],["新增了一个方法func2",{"2":{"32":1}}],["返回两个数的差",{"2":{"32":1}}],["8",{"2":{"32":3}}],["8=9",{"2":{"32":1}}],["8=",{"2":{"32":3}}],["func2",{"2":{"32":2}}],["func1的值",{"2":{"32":1}}],["func1",{"2":{"32":7}}],["functional",{"0":{"30":1}}],["07",{"2":{"32":1}}],["09",{"2":{"29":1}}],["liskov1",{"2":{"32":2}}],["liskov",{"2":{"32":2}}],["lambda体",{"2":{"26":1}}],["lambda形参列表",{"2":{"26":1}}],["lambda操作符",{"2":{"26":1}}],["lambda",{"0":{"16":1},"1":{"22":1,"26":1},"2":{"26":1}}],["lambda表达式的本质就是",{"2":{"26":1}}],["lambda表达式的本质是什么呢",{"2":{"26":1}}],["lambda表达式",{"2":{"7":1,"22":2,"26":2}}],["运行结果",{"2":{"32":1}}],["运行代码结果如下",{"2":{"23":1}}],["运行代码输出结果如下",{"2":{"17":1}}],["错误示例",{"0":{"32":1}}],["才可以在方法级保持单一职责原则",{"2":{"31":1}}],["才能在代码级违反单一职责原则",{"2":{"31":1}}],["只有类中方法数量足够少",{"2":{"31":1}}],["只有逻辑足够简单",{"2":{"31":1}}],["只是增加方法",{"2":{"27":1}}],["降低变更引起的风险",{"2":{"31":1}}],["降低类的复杂性",{"2":{"31":1}}],["提高类的可读性",{"2":{"31":1}}],["一个类只负责一种职责",{"2":{"31":1}}],["一个类对于另一个类的依赖应该建立在最小接口上",{"2":{"18":1}}],["注意事项和细节",{"0":{"31":1,"40":1}}],["函数式",{"0":{"30":1}}],["微信信息",{"2":{"29":2}}],["微信",{"2":{"29":1}}],["电子邮件",{"2":{"29":1}}],["电子邮件信息",{"2":{"25":2,"29":2}}],["定义接口",{"2":{"29":1}}],["定义的所有程序",{"2":{"24":1}}],["客户端无需改变",{"2":{"29":1}}],["客户端不应该依赖它不需要的接口",{"2":{"13":1}}],["进行优化",{"2":{"29":1}}],["进程了解",{"2":{"4":1}}],["仍然遵守单一职责原则",{"2":{"27":1}}],["虽然没有在",{"2":{"27":1}}],["虽然不强制子类遵守",{"2":{"19":1}}],["考虑在交通工具类中",{"2":{"27":1}}],["还需要修改客户端",{"2":{"27":1}}],["还可能有微信",{"2":{"25":1}}],["作为接口的实例",{"2":{"26":1}}],["需要一个参数",{"2":{"26":1}}],["需要考虑所有的子类",{"2":{"19":1}}],["格式二",{"2":{"26":1}}],["格式一",{"2":{"26":1}}],["无意",{"2":{"32":1}}],["无返回值",{"2":{"26":1}}],["无参",{"2":{"26":1}}],["六种情况",{"2":{"26":1}}],["右边",{"2":{"26":1}}],["左边",{"2":{"26":1}}],["箭头操作符",{"2":{"26":1}}],["或者两者都有",{"2":{"40":1}}],["或",{"2":{"26":1}}],["符号含义",{"2":{"26":1}}],["基本使用",{"0":{"26":1}}],["基本介绍",{"0":{"9":1,"13":1,"15":1,"24":1}}],["这样在变量引用和实际对象间",{"2":{"40":1}}],["这里本意是求出",{"2":{"32":1}}],["这种修改方法没有对原来的类做大的修改",{"2":{"27":1}}],["这些类实现",{"2":{"25":1}}],["这是很没有必要的",{"2":{"18":1}}],["表示接收者",{"2":{"25":1}}],["表达式",{"0":{"16":1},"1":{"22":1,"26":1}}],["引入一个抽象的接口",{"2":{"25":1}}],["引擎",{"2":{"7":1}}],["得到解决思路",{"2":{"25":1}}],["则对应的",{"2":{"25":1}}],["则当这个类需要修改时",{"2":{"19":1}}],["短信等",{"2":{"25":2}}],["我们应当遵守单一职责原则",{"2":{"31":1}}],["我们获取消息的对象不只是电子邮件",{"2":{"25":1}}],["我爱北京故宫",{"2":{"22":1,"26":1}}],["我爱北京天安门",{"2":{"22":1,"26":1}}],["且比较容易想到",{"2":{"25":1}}],["简单",{"2":{"25":1}}],["简介",{"0":{"7":1},"1":{"11":1}}],["完成person接收消息的功能",{"2":{"25":1,"29":1}}],["weixin",{"2":{"25":1,"29":2}}],["world",{"2":{"25":2,"29":4}}],["watervehicle",{"2":{"23":4}}],["hello",{"2":{"25":2,"29":4}}],["generated",{"2":{"35":1}}],["getinfo",{"2":{"25":2,"29":4}}],["gt",{"2":{"10":3,"26":1}}],["extends",{"2":{"32":1}}],["email",{"2":{"25":6,"29":2}}],["effective",{"2":{"14":1}}],["53",{"2":{"27":1}}],["56",{"2":{"25":1}}],["5方法",{"2":{"18":2}}],["采用的是直接实现方式",{"2":{"25":1}}],["组合",{"2":{"24":1}}],["遵循里氏替换原则",{"2":{"24":1,"40":1}}],["遵守单一职责原则",{"2":{"23":1}}],["那么类型",{"2":{"24":1}}],["时",{"2":{"24":1}}],["都代换成",{"2":{"24":1}}],["都有类型为",{"2":{"24":1}}],["见方案3",{"2":{"23":1}}],["改动过大",{"2":{"27":1}}],["改动的代码会比较少",{"2":{"23":1}}],["改进",{"2":{"23":1}}],["直接修改vehicle类",{"2":{"23":1}}],["同时也需要修改客户端",{"2":{"23":1}}],["同时类图的具体实现代码如下所示",{"2":{"18":1}}],["分析",{"2":{"23":1,"27":1}}],["分解成不同的类",{"2":{"17":1,"23":1}}],["水路运行",{"2":{"23":1}}],["天空运行",{"2":{"23":2}}],["公路运行",{"2":{"23":3}}],["根据依赖倒转原则",{"2":{"29":1}}],["根据方案2中",{"2":{"27":1}}],["根据方案1",{"2":{"23":1}}],["根据不同的交通工具",{"2":{"17":1}}],["方法引用和构造器引用",{"0":{"34":1}}],["方法引用的写法",{"2":{"22":1}}],["方式传递",{"0":{"39":1}}],["方式6",{"2":{"26":1}}],["方式5",{"2":{"26":1}}],["方式4",{"2":{"26":1}}],["方式3",{"2":{"26":1,"39":1}}],["方式2",{"2":{"26":1,"37":1}}],["方式1完成",{"2":{"29":1}}],["方式1",{"2":{"26":1,"35":1}}],["方案3分析",{"2":{"27":1}}],["方案3",{"0":{"27":1},"2":{"27":1}}],["方案",{"0":{"25":1,"29":1}}],["方案2分析",{"2":{"23":1}}],["方案2",{"0":{"23":1},"2":{"23":1,"29":1}}],["方案1",{"0":{"17":1},"2":{"17":1,"25":1}}],["3",{"2":{"32":4}}],["3=14",{"2":{"32":1}}],["3=8",{"2":{"32":1}}],["3=",{"2":{"32":2}}],["32",{"2":{"22":1}}],["3方法",{"2":{"18":2}}],["x3c",{"2":{"22":4,"26":3}}],[">",{"2":{"22":2,"26":2}}],["receiver",{"2":{"29":2}}],["receive",{"2":{"25":2,"29":3}}],["return",{"2":{"22":1,"25":1,"29":2,"32":3}}],["roadvehicle",{"2":{"23":6}}],["r2",{"2":{"22":2,"26":2}}],["r1",{"2":{"22":2,"26":2}}],["runair",{"2":{"27":2}}],["runwater",{"2":{"27":2}}],["runnable",{"2":{"22":3,"26":3}}],["run",{"2":{"17":4,"22":3,"23":6,"26":3,"27":2}}],["由匿名内部类转换到lambda表达式",{"2":{"22":1}}],["由上述类图结合具体实现代码中",{"2":{"18":1}}],["举例",{"0":{"22":1}}],["合成复用原则",{"2":{"20":1}}],["迪米特原则",{"2":{"20":1}}],["开关的接口",{"2":{"35":1}}],["开闭原则ocp",{"2":{"20":1}}],["开发工具与jvm带来了大量新特性",{"2":{"7":1}}],["里氏代换原则",{"2":{"20":1}}],["里氏替换原则说明",{"2":{"24":1}}],["里氏替换原则",{"2":{"19":1}}],["原则",{"2":{"20":1}}],["原则的中心思想是",{"2":{"15":1}}],["单一职责原则",{"2":{"20":1}}],["便是解决编程中",{"2":{"19":1}}],["便于其他程序员阅读和理解",{"2":{"14":1}}],["便于并行",{"2":{"7":1}}],["涉及到子类的功能也有可能会出现故障",{"2":{"19":1}}],["增加对象间的耦合性",{"2":{"19":1}}],["程序稳定性更好",{"2":{"40":1}}],["程序",{"2":{"24":1}}],["程序的可移植性降低",{"2":{"19":1}}],["程序员面临着来自",{"2":{"14":1}}],["比如使用继承会给程序带来侵入性",{"2":{"19":1}}],["也带来了弊端",{"2":{"19":1}}],["继承时",{"2":{"40":1}}],["继承实际上让两个类的耦合性增加了",{"2":{"24":1}}],["继承给程序设计带来遍历的同时",{"2":{"19":1}}],["继承隐含的含义",{"2":{"19":1}}],["父类已经实现好的方法",{"2":{"19":1}}],["测试",{"2":{"18":1}}],["11+3+9=23",{"2":{"32":1}}],["11+3+9=",{"2":{"32":1}}],["11",{"2":{"32":8}}],["17",{"2":{"29":1}}],["1",{"0":{"25":1},"2":{"29":1,"32":7}}],["12",{"2":{"22":1}}],["18",{"2":{"18":1}}],["16",{"2":{"18":1,"25":2,"29":1,"32":1}}],["15",{"2":{"17":1,"18":1,"23":1,"27":1}}],["this",{"2":{"37":2}}],["tv",{"2":{"35":3,"37":5,"39":6}}],["t2",{"2":{"24":2}}],["t1",{"2":{"24":3}}],["test3",{"2":{"26":1}}],["test2",{"2":{"22":1}}],["test1",{"2":{"22":1,"26":1}}],["test",{"2":{"22":2,"26":2}}],["todo",{"2":{"18":1,"32":1,"35":1}}],["top",{"2":{"17":1,"18":3,"23":1,"25":2,"27":1,"29":2,"32":2}}],["title",{"2":{"18":1,"25":1,"29":1,"32":1}}],["输出结果",{"2":{"18":1,"25":1,"29":1}}],["具体实现代码和结果如下所示",{"2":{"32":1}}],["具体代码",{"2":{"18":1,"25":1,"29":1,"32":1}}],["具有更好的",{"2":{"14":1}}],["详情",{"2":{"18":1}}],["详见方案2",{"2":{"17":1}}],["保证类a的依赖最小接口",{"2":{"18":1}}],["因此按照接口隔离原则来进行分析",{"2":{"18":1}}],["但是在方法级别上",{"2":{"27":1}}],["但是没有返回值",{"2":{"26":1}}],["但是",{"2":{"25":1}}],["但是改动过大",{"2":{"23":1}}],["但是子类对父类已实现方法随机修改的话",{"2":{"19":1}}],["但是类b必须实现interface1中的所有方法",{"2":{"18":1}}],["但是类a只会使用到interface1中的三个方法",{"2":{"18":1}}],["但是指挥用到1",{"2":{"18":4}}],["依赖关系传递的三种方式",{"0":{"33":1},"1":{"35":1,"37":1,"39":1}}],["依赖",{"2":{"18":4,"24":1}}],["依赖倒转",{"2":{"15":1,"20":1}}],["依赖倒转原则的设计理念",{"2":{"15":1}}],["依赖倒转原则",{"2":{"15":1}}],["类级别上遵守单一职责原则",{"2":{"27":1}}],["类依赖接口",{"2":{"25":1}}],["类也需要增加对应的接收方法",{"2":{"25":1}}],["类接收消息的功能",{"2":{"21":1}}],["类a通过接口interface1依赖使用类b",{"2":{"18":1}}],["类通过接口interface1",{"2":{"18":4}}],["类库",{"2":{"7":1}}],["实现接口",{"2":{"35":1,"39":1}}],["实现三个对应不同交通工具的方法",{"2":{"27":1}}],["实现代码及输出结果如下所示",{"2":{"25":1,"29":1}}],["实现了",{"2":{"18":22}}],["实例",{"0":{"28":1},"1":{"32":1}}],["实例2",{"2":{"22":1}}],["实例1",{"2":{"22":1}}],["实际上是在设定规范和契约",{"2":{"19":1}}],["实际项目中使用过什么设计模式",{"2":{"6":1}}],["b类继承了a",{"2":{"32":1}}],["b类",{"2":{"18":2}}],["b",{"2":{"18":16,"32":7}}],["点击查看代码",{"2":{"35":1,"37":1,"39":1}}],["点击查看",{"2":{"18":1}}],["若对类图理解不够清楚",{"2":{"18":1}}],["首先查看下面的uml类图",{"2":{"18":1}}],["将交通工具类的不同",{"2":{"23":1}}],["将该类进行拆分",{"2":{"17":1}}],["将代码像数据一样进行传递",{"2":{"16":1}}],["解决问题",{"2":{"24":1}}],["解决办法",{"2":{"17":1}}],["解决了什么问题",{"2":{"6":1}}],["又负责飞机的运行等",{"2":{"17":1}}],["显然违反了单一职责原则",{"2":{"17":1}}],["轮船",{"2":{"17":1,"23":2,"27":2}}],["+",{"2":{"17":1,"23":3,"27":3,"32":7}}],["交通工具类",{"2":{"17":1}}],["飞机",{"2":{"17":2,"23":2,"27":2}}],["汽车",{"2":{"17":1,"27":2}}],["摩托车",{"2":{"17":2,"23":2}}],["nums2",{"2":{"32":6}}],["nums1",{"2":{"32":6}}],["new",{"2":{"17":1,"18":8,"22":2,"23":3,"25":2,"26":2,"27":1,"29":3,"32":2,"35":2,"37":2,"39":2}}],["nashorn",{"2":{"7":1}}],["vehicle2",{"2":{"27":7}}],["vehicle",{"2":{"17":9,"23":6,"27":6}}],["void",{"2":{"17":2,"18":39,"22":3,"23":4,"25":2,"26":4,"27":4,"29":2,"32":1,"35":5,"37":5,"39":7}}],["20",{"2":{"32":1}}],["2024",{"2":{"17":1,"18":1,"23":1,"25":1,"27":1,"29":1,"32":1}}],["21",{"2":{"22":4}}],["2",{"0":{"29":1},"2":{"18":2}}],["22",{"2":{"17":1,"23":1,"27":1}}],["47",{"2":{"23":1}}],["44",{"2":{"17":1}}],["4",{"2":{"17":1,"18":3,"23":1,"25":1,"27":1,"29":1,"32":1}}],["花木凋零成兰",{"2":{"17":1,"18":1,"23":1,"25":1,"27":1,"29":1,"32":1}}],["ytazwc",{"2":{"17":1,"18":3,"23":1,"25":2,"27":1,"29":2,"32":2}}],["play",{"2":{"35":3,"37":3,"39":3}}],["p",{"2":{"24":2}}],["person",{"2":{"21":1,"25":7,"29":6}}],["println",{"2":{"17":1,"18":16,"22":7,"23":3,"25":1,"26":6,"27":3,"29":1,"32":6,"35":1,"37":1,"39":1}}],["principle",{"2":{"15":1,"17":1,"18":3,"23":1,"25":2,"27":1,"29":2,"32":2}}],["public",{"2":{"17":3,"18":31,"22":4,"23":5,"25":4,"26":4,"27":5,"29":6,"32":5,"35":4,"37":6,"39":1}}],["package",{"2":{"17":1,"18":3,"23":1,"25":2,"27":1,"29":2,"32":2}}],["来代表交通工具",{"2":{"17":1}}],["本质",{"2":{"16":1}}],["把展现的细节的任务交给他们的实现类去完成",{"2":{"15":1}}],["而不涉及任何具体的操作",{"2":{"15":1}}],["而不是依赖一个具体的子类",{"2":{"15":1}}],["细节就是具体的实现类",{"2":{"15":1}}],["细节应该依赖抽象",{"2":{"15":1}}],["中继承的思考和说明",{"0":{"19":1}}],["中",{"2":{"15":1}}],["在水中上运行",{"2":{"27":2}}],["在天空上运行",{"2":{"27":2}}],["在适当的情况下",{"2":{"24":1}}],["在子类中尽量不要重写父类的方法",{"2":{"24":1}}],["在所有的对象",{"2":{"24":1}}],["在公路上运行",{"2":{"17":4,"27":2}}],["在",{"2":{"15":1}}],["在其巨著",{"2":{"14":1}}],["以抽象为基础搭建的架构比以细节为基础搭建的架构要更稳定",{"2":{"15":1}}],["以交通工具运行为例",{"2":{"12":1}}],["相对于细节的多变性",{"2":{"15":1}}],["面向接口编程",{"2":{"15":1}}],["面向对象",{"0":{"19":1},"2":{"10":1}}],["倒置",{"2":{"15":1,"20":1}}],["抽象方法",{"2":{"35":1,"37":1,"39":1}}],["抽象指的是接口或抽象类",{"2":{"15":1}}],["抽象的东西要更稳定",{"2":{"15":1}}],["抽象不应该依赖细节",{"2":{"15":1}}],["抽象类",{"2":{"15":1}}],["接收接口",{"2":{"35":1}}],["接收消息",{"2":{"25":1}}],["接口传递",{"0":{"35":1}}],["接口即可",{"2":{"25":1}}],["接口隔离原则",{"2":{"20":1}}],["接口3",{"2":{"18":1}}],["接口2",{"2":{"18":1}}],["接口1",{"2":{"18":1}}],["接口",{"0":{"30":1},"2":{"15":1,"18":1}}],["接受维护项目",{"2":{"6":1}}],["如果新增这些类",{"2":{"25":1}}],["如果对每个类型为",{"2":{"24":1}}],["如果一个类被其他的类所继承",{"2":{"19":1}}],["如何正确使用继承的原则",{"2":{"19":1}}],["如下所示",{"2":{"17":1,"23":1,"27":1}}],["如",{"2":{"15":1}}],["如类a负责两个不同的职责",{"2":{"9":1}}],["二者都应该依赖其抽象",{"2":{"15":1}}],["高层模块不应该依赖底层模块",{"2":{"15":1}}],["高内聚",{"2":{"14":1}}],["是类型",{"2":{"24":1}}],["是一个匿名函数",{"2":{"16":1}}],["是指",{"2":{"15":1}}],["是对软件设计中普遍存在",{"2":{"6":1}}],["itv接口",{"2":{"35":1,"37":1,"39":1}}],["itv",{"2":{"35":4,"37":4,"39":5}}],["iopenandclose",{"2":{"35":2,"37":2,"39":2}}],["ireceiver",{"2":{"25":3,"29":4}}],["improve",{"2":{"18":1,"29":2}}],["implements",{"2":{"18":4,"29":2,"35":2,"37":2,"39":2}}],["i",{"2":{"18":24}}],["int",{"2":{"22":4,"32":9}}],["integer",{"2":{"22":5}}],["integer>",{"2":{"22":4}}],["interface3",{"2":{"18":4}}],["interface2",{"2":{"18":4}}],["interface1",{"2":{"18":14}}],["interface",{"2":{"18":4,"29":1,"35":2,"37":2,"39":2}}],["inversion",{"2":{"15":1}}],["idea工具熟练",{"2":{"4":1}}],["就存在一个缓冲层",{"2":{"40":1}}],["就是接口的实例",{"2":{"16":1}}],["就是一个线程上",{"2":{"11":1}}],["就曾经说过",{"2":{"14":1}}],["changhong",{"2":{"35":4,"37":4,"39":4}}],["con1",{"2":{"26":2}}],["con",{"2":{"26":2}}],["consumer",{"2":{"26":3}}],["concurrent在并发编程中使用的工具包",{"2":{"2":1}}],["com3",{"2":{"22":2}}],["com2",{"2":{"22":2}}],["compare3",{"2":{"22":2}}],["compare2",{"2":{"22":2}}],["compare1",{"2":{"22":2}}],["compare",{"2":{"22":7}}],["comparator",{"2":{"22":4}}],["com1",{"2":{"22":2}}],["c类通过接口去依赖d类",{"2":{"18":1}}],["c",{"2":{"18":10}}],["class",{"2":{"17":2,"18":10,"23":4,"25":3,"27":2,"29":4,"32":3,"35":3,"37":3,"39":3}}],["c++新手的区别就是前者手背上有很多伤疤",{"2":{"14":1}}],["c++老手和",{"2":{"14":1}}],["c++",{"2":{"14":1}}],["settv",{"2":{"39":3}}],["setter",{"0":{"39":1}}],["segregation1",{"2":{"18":3}}],["segregation",{"2":{"18":3}}],["s",{"2":{"26":4}}],["system",{"2":{"17":1,"18":16,"22":7,"23":3,"25":1,"26":6,"27":3,"29":1,"32":6}}],["stub",{"2":{"35":1}}],["string>",{"2":{"26":3}}],["string",{"2":{"17":2,"18":1,"23":4,"25":2,"26":1,"27":4,"29":4,"32":1,"35":1,"37":1,"39":1}}],["stream",{"0":{"36":1},"2":{"7":1}}],["static",{"2":{"17":1,"18":1,"23":1,"25":1,"27":1,"29":1,"32":1,"35":1,"37":1,"39":1}}],["singleresponsibility3",{"2":{"27":1}}],["singleresponsibility2",{"2":{"23":1}}],["singleresponsibility1",{"2":{"17":1}}],["singleresponsibility",{"2":{"17":1,"23":1,"27":1}}],["scott",{"2":{"14":1}}],["的和",{"2":{"32":1}}],["的子类型",{"2":{"24":1}}],["的行为没有发生变化",{"2":{"24":1}}],["的对象",{"2":{"24":2}}],["的精要",{"2":{"14":1}}],["的各种问题",{"2":{"6":1}}],["description",{"2":{"18":1,"25":1,"29":1,"32":1}}],["dependencypass",{"2":{"35":1,"37":1,"39":1}}],["dependencyinversion",{"2":{"25":3,"29":4}}],["dependence",{"2":{"15":1}}],["dependecyinversion",{"2":{"25":1}}],["depend5",{"2":{"18":3}}],["depend4",{"2":{"18":3}}],["depend3",{"2":{"18":3}}],["depend2",{"2":{"18":3}}],["depend1",{"2":{"18":6}}],["d类",{"2":{"18":2}}],["date",{"2":{"17":1,"18":1,"23":1,"25":1,"27":1,"29":1,"32":1}}],["d",{"2":{"14":1,"18":16}}],["你就懂了面向对象分析和设计",{"2":{"14":1}}],["懂了设计模式",{"2":{"14":1}}],["金句",{"2":{"14":1}}],["低耦合的特性",{"2":{"14":1}}],["使得以",{"2":{"24":1}}],["使用",{"2":{"18":4,"26":1}}],["使用一个类",{"2":{"17":1}}],["使用lambda表达式可以写出更简洁更灵活的代码",{"2":{"16":1}}],["使用接口或抽象类的目的是制定好规范",{"2":{"15":1}}],["使用到多种设计模式",{"2":{"10":1}}],["使程序呈现",{"2":{"14":1}}],["对方案",{"2":{"29":1}}],["对类分解的同时",{"2":{"27":1}}],["对类来说",{"2":{"9":1}}],["对于属于接收消息范围的",{"2":{"25":1}}],["对于类c也是同理",{"2":{"18":1}}],["对该方案进行分析",{"2":{"25":1}}],["对原来功能没有影响",{"2":{"14":1}}],["当增加新的功能时",{"2":{"14":1}}],["当职责1需求变更而改变a时",{"2":{"9":1}}],["非常方便",{"2":{"14":1}}],["不用多次编写",{"2":{"14":1}}],["代码运行结果如下",{"2":{"27":1}}],["代码重用性",{"2":{"14":1}}],["代码更少",{"2":{"7":1}}],["软件",{"2":{"14":1}}],["软件工程中",{"2":{"6":1}}],["灵活性等多方面的挑战",{"2":{"14":1}}],["内聚性及可维护性",{"2":{"14":1}}],["耦合性",{"2":{"14":1}}],["编写软件过程中",{"2":{"14":1}}],["编译器",{"2":{"7":1}}],["应用实例",{"0":{"12":1,"18":1,"21":1},"1":{"17":1,"23":1,"25":1,"27":1,"29":1}}],["从上到下运行程序",{"2":{"11":1}}],["串行流",{"2":{"11":1}}],["并且修改后",{"2":{"19":1}}],["并用不同的线程分别处理每个数据块的流",{"2":{"11":1}}],["并行流就是把一个内容分为多个数据块",{"2":{"11":1}}],["并行流和串行流",{"0":{"11":1}}],["服务器集群",{"2":{"10":1}}],["架构",{"2":{"10":1}}],["框架",{"2":{"10":1}}],["功能模块",{"2":{"10":1}}],["=",{"2":{"10":3,"17":1,"18":2,"22":8,"23":3,"25":1,"26":4,"27":1,"29":1,"32":2,"35":2,"37":3,"39":3}}],["o2",{"2":{"22":4,"24":2}}],["o1",{"2":{"22":4,"24":2}}],["override",{"2":{"22":2,"26":2,"29":2,"35":1,"37":1,"39":1}}],["open",{"2":{"35":3,"37":3,"39":3}}],["openandclose",{"2":{"35":3,"37":4,"39":3}}],["operation5",{"2":{"18":11}}],["operation4",{"2":{"18":11}}],["operation3",{"2":{"18":11}}],["operation2",{"2":{"18":11}}],["operation1",{"2":{"18":16}}],["optional类",{"0":{"38":1},"2":{"7":1}}],["out",{"2":{"17":1,"18":16,"22":7,"23":3,"25":1,"26":6,"27":3,"29":1,"32":6,"35":1,"37":1,"39":1}}],["ooa",{"2":{"14":1}}],["oo",{"0":{"19":1},"2":{"10":1}}],["auto",{"2":{"35":1}}],["author",{"2":{"17":1,"18":1,"23":1,"25":1,"27":1,"29":1,"32":1}}],["a类",{"2":{"32":1}}],["a类通过接口去依赖b类",{"2":{"18":1}}],["accept",{"2":{"26":3}}],["airvehicle",{"2":{"23":5}}],["a",{"2":{"18":10,"32":7}}],["args",{"2":{"17":1,"18":1,"23":1,"25":1,"27":1,"29":1,"32":1,"35":1,"37":1,"39":1}}],["a2",{"2":{"9":1}}],["api",{"0":{"36":1},"2":{"7":1}}],["所有的引用基类的地方必须能透明的使用其子类的对象",{"2":{"24":1}}],["所以根据依赖倒转原则进行分析",{"2":{"25":1}}],["所以我们可以将接口interface1拆分为几个接口",{"2":{"18":1}}],["所以需要将类a的粒度分解为a1",{"2":{"9":1}}],["所提出的解决方案",{"2":{"6":1}}],["可维护性",{"2":{"31":1}}],["可能是",{"2":{"32":1}}],["可能还以为调用的是父类的func1方法",{"2":{"32":1}}],["可能意识的重写了父类的方法",{"2":{"32":1}}],["可能会对整个继承体系造成破坏",{"2":{"19":1}}],["可能造成职责2执行错误",{"2":{"9":1}}],["可以通过聚合",{"2":{"24":1}}],["可以发现",{"2":{"18":1}}],["可以查看下面的实现代码",{"2":{"18":1}}],["可以把lambda表达式理解为一段可以传递的代码",{"2":{"16":1}}],["可以很大程度上提高程序的执行效率",{"2":{"11":1}}],["可靠性",{"2":{"14":1}}],["可扩展性",{"2":{"14":1}}],["可读性",{"2":{"6":1,"14":1}}],["职责1和职责2",{"2":{"9":1}}],["即求",{"2":{"32":1}}],["即在使用继承的过程中",{"2":{"32":1}}],["即在使用继承时",{"2":{"24":1}}],["即重写的抽象方法的方法体",{"2":{"26":1}}],["即接口中的抽象方法的形参列表",{"2":{"26":1}}],["即符合依赖倒转原则",{"2":{"25":1}}],["即有细节依赖抽象",{"2":{"25":1}}],["即将类分解",{"2":{"23":1}}],["即",{"2":{"19":1,"24":1}}],["即可以得到以下类图",{"2":{"18":1}}],["即负责摩托车在公路上",{"2":{"17":1}}],["即增加新的功能时",{"2":{"14":1}}],["即编程规范",{"2":{"14":1}}],["即相同功能的代码",{"2":{"14":1}}],["即一个类对另外一个类的依赖应该建立在更小的接口上",{"2":{"13":1}}],["即一个类应该只负责一项职责",{"2":{"9":1}}],["即维护性",{"2":{"6":1}}],["学习书籍",{"0":{"8":1}}],["学习视频",{"0":{"1":1,"5":1}}],["允许jvm上运行js应用",{"2":{"7":1}}],["最大化减少空指针异常",{"2":{"7":1}}],["速度更快",{"2":{"7":1}}],["为java语言",{"2":{"7":1}}],["怎么使用的",{"2":{"6":1}}],["大厂提问",{"2":{"6":1}}],["规范性",{"2":{"6":1}}],["目前程序员门槛越来越高",{"2":{"6":1}}],["反复出现",{"2":{"6":1}}],["设计模式常用七大原则",{"0":{"20":1}}],["设计模式包含了面向对象的精髓",{"2":{"14":1}}],["设计模式是为了让程序",{"2":{"14":1}}],["设计模式的目的",{"0":{"14":1}}],["设计模式的重要性",{"0":{"6":1}}],["设计模式+数据结构",{"2":{"10":1}}],["设计模式在软件中哪里",{"0":{"10":1}}],["设计模式",{"2":{"6":1}}],["图解+框架源码剖析",{"2":{"5":1}}],["尚硅谷java设计模式",{"2":{"5":1}}],["有一定线程",{"2":{"4":1}}],["有java基础",{"2":{"4":1}}],["了解java新特性",{"2":{"4":1}}],["前置知识",{"0":{"4":1}}],["主要为学习各种开发技术专用",{"2":{"3":1}}],["介绍",{"0":{"3":1}}],["util",{"2":{"2":1}}],["java8",{"2":{"7":1}}],["java8新特性",{"2":{"4":1}}],["java",{"2":{"2":1,"15":1}}],["juc入门",{"2":{"4":1}}],["juc是什么",{"0":{"2":1}}],["juc并发编程",{"2":{"1":1}}],["指",{"2":{"2":1}}],["画类图",{"0":{"0":1}}]],"serializationVersion":2}';export{t as default};
